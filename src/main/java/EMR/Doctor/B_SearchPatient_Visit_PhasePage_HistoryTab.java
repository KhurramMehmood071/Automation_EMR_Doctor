package EMR.Doctor;

import java.time.Duration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class B_SearchPatient_Visit_PhasePage_HistoryTab {

	/**
	 * @param args
	 * @throws InterruptedException
	 */
	public static void main(String[] args) throws InterruptedException {
		// TODO Auto-generated method stub

		// ******************Launch Browser*****************

		// Launch Chrome Browser
		System.setProperty("webdriver.chrome.driver",
				"C:\\Users\\AKDNdHRC\\Selenium\\Training Sessions\\Session 01\\MavenLoginTest\\Login\\chromedriver\\chromedriver.exe");

		WebDriver driver = new ChromeDriver();

		// Cast driver to JavascriptExecutor
		JavascriptExecutor js = (JavascriptExecutor) driver;

		// Explicit Wait for 60 Seconds [Specific WebElement]
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(60));

		// Implicit Wait for 60 Seconds [Global use for All WebElement]
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		driver.manage().timeouts().scriptTimeout(Duration.ofSeconds(30));
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(60));

		// **********************Open Browser****************

		// Browser Open in Maximise Window
		driver.manage().window().maximize();

		// Open URL EMR Staging Site (Login Page)
		driver.get("https://emrdoctor.virtualdoc.akdndhrc.org/#/emrfrontend/");

		// *********************Login Page********************

		// Pauses for 1 second
		Thread.sleep(1000);

		// Locate User name By CSS Locator -- [tag#id] -- CSS Locator # 01
		driver.findElement(By.cssSelector("input#mat-input-0")).sendKeys("sabeen.shah@aku.edu");

		// Locate Password by By CSS Locator -- (tag[attribute=value]) -- CSS Locator #
		// 03
		driver.findElement(By.cssSelector("input[type=password]")).sendKeys("sabeen123#");

		// Locate Login Button by CSS Locator using [tag.value of class name] -- CSS
		// Locator # 02
		driver.findElement(By.cssSelector("button.btn-Signin")).click();

		// Flow
		System.out.println("Step# 01: Successfully Login the EMR Doctor App.");

		// *******************Dashboard************************

		// In Dashboard Click on "Search Patient" Button

		// Pauses for 4 second
		Thread.sleep(4000);

		// Locate Snack-Br (Toast Message) and Press Ok Button
//		driver.findElement(By.xpath("//div[@aria-live='assertive']//div//simple-snack-bar//div//button")).click();

		// Locate Search Patient Button by Xpath
		driver.findElement(By.xpath("//button[normalize-space()='Search Patient']")).click();

		// Flow
		System.out.println("Step# 02: In Dashboard Click on 'SEARCH PATIENT' Button ");

		// *********************Search Patient******************

		// Pauses for 1 second
		Thread.sleep(1000);

//		// Search Fields
		// Appt. Date: dd-MM-yyyy
		String Appt_Date = "08-05-2025";
		// ______________________________________________________

		// Search Criteria in Search Patient Screen

		// Field #01 Patient Name [User Input]
//		String Patient_Name = "Test Patient Two";

		// Field #02 MR No [Auto-Generated by App]
		String Patient_MR_No = "4359033";

		// Field #03 AKU MR No [Use r Input]
//		String Patient_AKU_MR_No = "777-71-55";

		// Field #04 CNIC No [User Input]
//		String Patient_CNIC_No = "02286309891129";

		// Field #05 Phone No [User Input]
//		String Patient_Phone_No = "03128866445";

		// ______________________________________________________

		// Locate User name By XPath Locator
//		driver.findElement(By.xpath(
//				"/html/body/app-root/app-search-patient/div/mat-card/form/div[1]/div[1]/mat-form-field/div/div[1]/div[3]/input"))
//				.sendKeys(Patient_Name);

		// Locate MR No By XPath Locator
		driver.findElement(By.xpath(
				"/html/body/app-root/app-search-patient/div/mat-card/form/div[1]/div[2]/mat-form-field/div/div[1]/div[3]/input"))
				.sendKeys(Patient_MR_No);

		// Locate AKU MR No By XPath Locator
//		driver.findElement(By.xpath(
//				"/html/body/app-root/app-search-patient/div/mat-card/form/div[1]/div[3]/mat-form-field/div/div[1]/div[3]/input"))
//				.sendKeys(Patient_AKU_MR_No);

		// Locate CNIC No By XPath Locator
//		driver.findElement(By.xpath(
//				"/html/body/app-root/app-search-patient/div/mat-card/form/div[1]/div[4]/mat-form-field/div/div[1]/div[3]/input"))
//				.sendKeys(Patient_CNIC_No);

		// Locate Phone No By XPath Locator
//		driver.findElement(By.xpath(
//				"/html/body/app-root/app-search-patient/div/mat-card/form/div[1]/div[5]/mat-form-field/div/div[1]/div[3]/input"))
//				.sendKeys(Patient_Phone_No);

		// Locate Search Button by XPath
		driver.findElement(By.xpath("/html/body/app-root/app-search-patient/div/mat-card/form/div[2]/button[1]"))
				.click();

		// Flow
		System.out.println("Step# 03: Successfully Searched the Patient Whose MR No. is [ " + Patient_MR_No + " ]");
//		System.out.println("Step# 03: Successfully Searched the Patient Whose Name is [ " + Patient_Name + " ]");
//		System.out.println("Step# 03: Successfully Searched the Patient Whose AKU MR No. is [ " + Patient_AKU_MR_No + " ]");

		// *********************Select Patient******************

		// Pauses for 3 seconds
		Thread.sleep(3000);

		// In Select Patient Screen to Find Patient With MR No and Appt. Date then
		// Select

		try {

			// Define Search Criteria
			String Patient_searchByMrNo = Patient_MR_No; // Patient MR No
			String Patient_searchByApptDate = Appt_Date; // Patient Appt. Date

			// Flow
			System.out.println("Step# 04: Select Patient With Appt. Date: [ " + Appt_Date
					+ " ] Regardless of Whether the Appt. has Ended or Not ");

			boolean Patientfound = false;

			// Define XPaths
			String patientMRXPath = ".//table//th[contains(text(), 'MR No')]/following-sibling::td";
			String ApptDateXPath = ".//table//th[contains(text(), 'Appointment Date')]/following-sibling::td";
			String SelectButtonXPath = ".//button[contains(@class,'Select')]";

			// Find all Patient Cards
			List<WebElement> VHpatientCards = driver
					.findElements(By.xpath("//mat-card[contains(@class, 'mat-focus-indicator')]"));

			// Loop Through Cards to Find a Match
			for (WebElement VHcard : VHpatientCards) {
				String patientMR = VHcard.findElement(By.xpath(patientMRXPath)).getText().trim();
				String ApptDate = VHcard.findElement(By.xpath(ApptDateXPath)).getText().trim();

				// Check if this Card Matches Exact Search Criteria
				if (patientMR.equalsIgnoreCase(Patient_searchByMrNo)
						&& ApptDate.equalsIgnoreCase(Patient_searchByApptDate)) {

					// Extract the patient name
					String PatientName = VHcard.findElement(By.xpath(".//p[contains(@class, 'patientName-Txt')]"))
							.getText().trim();

					// Click the View pdf Button
					WebElement SelectButton = wait.until(
							ExpectedConditions.elementToBeClickable(VHcard.findElement(By.xpath(SelectButtonXPath))));
					SelectButton.click();

					System.out.println("Step# 05: Selected Patient With Name: [ " + PatientName + " ] With MR No: [ "
							+ Patient_MR_No + " ] OR Appt. Date [ " + Appt_Date + " ]");

					System.out.println("Step# 06: Detailed View Phase Page for The Patient With Name: [ " + PatientName
							+ " ] With MR No: [ " + Patient_MR_No + " ] OR Appt. Date [ " + Appt_Date + " ]");

					Patientfound = true;
					break; // Stop after first match

				}
			}

			if (!Patientfound) {
				System.out.println("Step# 05: No Patient Found with Appt. Date: [ " + Appt_Date + " ]");

			}

		} catch (Exception e) {
			System.out.println("Exception Occurred: " + e.getMessage());
		}

		// ******************Patient Phase Page******************

		// Patient Phase Page Detailed View Patient Profile Tab

		// Pauses for 4 seconds
		Thread.sleep(4000);

		// View Problem List Tab
		driver.findElement(By.xpath("//button[normalize-space()='Problem List']")).click();
		System.out.println("Step# 07: In Phase Page Clicked on 'PROBLEM LIST' Tab  For View");

		// Pauses for 3 seconds
		Thread.sleep(3000);

		// View Medication Tab
		driver.findElement(By.xpath("//button[normalize-space()='Medication']")).click();
		System.out.println("Step# 08: In Phase Page Clicked on 'MEDICATION' Tab  For View");

		// Pauses for 3 seconds
		Thread.sleep(3000);

		// View Allergy Tab
		driver.findElement(By.xpath("//button[normalize-space()='Allergy']")).click();
		System.out.println("Step# 09: In Phase Page Clicked on 'ALLERGY' Tab  For View");

		// Pauses for 3 seconds
		Thread.sleep(3000);

		// View Immunization Tab
		driver.findElement(By.xpath("//button[normalize-space()='Immunization']")).click();
		System.out.println("Step# 10: In Phase Page Clicked on 'IMMUNIZATION' Tab  For View");

		// Pauses for 3 seconds
		Thread.sleep(3000);

		// View Investigation Result Tab
		driver.findElement(By.xpath("//button[normalize-space()='Investigation Result']")).click();
		System.out.println("Step# 11: In Phase Page Clicked on 'INVESTIGATION RESULT' Tab  For View");

		// Pauses for 3 seconds
		Thread.sleep(3000);

		// View Uploaded Document Tab
		driver.findElement(By.xpath("//button[normalize-space()='Upload Documents']")).click();
		System.out.println("Step# 12: In Phase Page Clicked on 'UPLOAD DOCUMENTS' Tab  For View");

		// Pauses for 3 seconds
		Thread.sleep(3000);

		// View Personal History Tab
		driver.findElement(By.xpath(" //button[normalize-space()='Personal Social History']")).click();
		System.out.println("Step# 13: In Phase Page Clicked on 'PERSONAL HISTORY' Tab  For View");

		// Patient Phase Page Detailed View Patient Demographics Tab

		// Pauses for 3 seconds
		Thread.sleep(3000);

		// View Patient Demographics Tab
		driver.findElement(By.xpath("//a[normalize-space()='DEMOGRAPHICS']")).click();
		System.out.println("Step# 14: In Phase Page Clicked on 'PATIENT DEMOGRAPHICS' Tab  For View");

		// Patient Phase Page Detailed View Patient Visit History Tab

		// Pauses for 3 seconds
		Thread.sleep(3000);

		// View Patient Visit History Tab
		driver.findElement(By.xpath("//a[normalize-space()='Visit History']")).click();
		System.out.println("Step# 15: In Phase Page Clicked on 'PATIENT VISIT HISTORY' Tab  For View");

		// Clicked on the Appointment Date Button, and the Patient was Searched Based on
		// the Selected Appointment Date.

		// Pauses for 3 seconds
		Thread.sleep(3000);

		// View Patient Appt. Date Tab
		driver.findElement(By.xpath("//a[normalize-space()='" + Appt_Date + "']")).click();
		System.out.println(
				"Step# 16: In Phase Page Clicked on 'PATIENT APPOINTMENT DATE' [ " + Appt_Date + " ] Tab  For View");

		// *********************HISTORY SECTION*********************

		// ____________________1.1 CHIEF COMPLAINTS_________________

		// Wait for the navigation bar to be visible
		WebElement historyDropdown1 = wait
				.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[normalize-space()='HISTORY']")));

		// Click on the "History" dropdown
		historyDropdown1.click();
		System.out.println("");
		System.out.println(
				"Step# 17: Clicked on the 'HISTORY' Section in the Navigation Bar and Select '1.1 - Chief Complaint' Form.");

		// Pauses for 2 seconds
		Thread.sleep(2000);

		// Wait for the "1.1 - Chief Complaint" option to be visible
		WebElement chiefComplaintOption = wait.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//a[normalize-space()='1.1 - Chief Complaint']")));

		// Click on the "1.1 - Chief Complaint" option
		chiefComplaintOption.click();

		// Pauses for 1 seconds
		Thread.sleep(1000);

		// List of ICD Codes to Select
		List<String> icdCodesToSelect = List.of("DA95 Coeliac disease", "1C12 Whooping cough",
				"BA00 Essential hypertension");

		// Locate the "Symptom/Diagnosis" Dropdown
		WebElement symptomDiagnosisDropdownTrigger = driver
				.findElement(By.xpath("//input[@placeholder='Select ICD Code']"));

		// for Sequence of ICD Codes
		int i = 1;

		for (String icdCode : icdCodesToSelect) {

			// Open the dropdown
			symptomDiagnosisDropdownTrigger.click();
			Thread.sleep(1000); // Pause for dropdown to open

			try {
				// Wait for the ICD code option to be clickable and select it
				WebElement icdOption = wait.until(ExpectedConditions
						.elementToBeClickable(By.xpath("//span[normalize-space()='" + icdCode + "']")));
				icdOption.click();
				System.out.println(" Selected ICD Code: 0" + i + " " + icdCode);

				// Enter HoPI Details
				driver.findElement(By.xpath("//textarea[@id='exampleFormControlTextarea1']"))
						.sendKeys("HoPI Details for " + icdCode);

				// Click on SAVE Button
				driver.findElement(By.xpath("//button[normalize-space()='Save']")).click();
				Thread.sleep(1000); // Pause for save action

				// Handle Toast Message
				WebElement snackBarButton = driver
						.findElement(By.xpath("//div[@aria-live='assertive']//div//simple-snack-bar//div//button"));
				if (snackBarButton.isDisplayed()) {
					snackBarButton.click();
				}
			} catch (Exception e) {
				System.out.println("Failed to Select ICD Code: " + icdCode + ". Error: " + e.getMessage());
			}

			// Pauses for 1 seconds
			Thread.sleep(1000);
			i++;
		}

		// Scroll to the bottom of the page
		js.executeScript("window.scrollTo(0, document.body.scrollHeight);");

		// Pause for 2 seconds
		Thread.sleep(2000);

		// Flow
		System.out.println("Step# 18: Successfully Saved The 'CHIEF COMPLAINTS' Form");

		// _________________1.2 Medical Surgical History_______________

		// Scroll to the top of the page
		js.executeScript("window.scrollTo(0, 0);");

		// Wait for the navigation bar to be visible
		WebElement historyDropdown2 = wait
				.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[normalize-space()='HISTORY']")));

		// Click on the "History" dropdown
		historyDropdown2.click();
		System.out.println("");
		System.out.println(
				"Step# 19: Clicked on the 'HISTORY' Section in the Navigation Bar and Select '1.2 - Medical Surgical History' Form.");

		// Pauses for 2 seconds
		Thread.sleep(2000);

		// Wait for the "1.2 - Medical Surgical History" option to be visible
		WebElement MedicalSurgicalHistory = wait.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//a[normalize-space()='1.2 - Medical Surgical History']")));

		// Click on the "1.2 - Medical Surgical History" option
		MedicalSurgicalHistory.click();

		// Pauses for 1 seconds
		Thread.sleep(1000);

		// Map of Medical Surgical History options with corresponding Month(s) and
		// Year(s)
		Map<String, int[]> MSHToSelect = Map.of("Asthma", new int[] { 2, 0 }, "Cancer", new int[] { 6, 1 },
				"Hepatitis B", new int[] { 3, 2 });

		// Locate the "Medical Surgical History" Dropdown
		WebElement MSHDropdownTrigger = driver.findElement(By.xpath("//input[@placeholder='Select History']"));

		// for Sequence of Medical Surgical History Options
		int a = 1;

		for (Map.Entry<String, int[]> entry : MSHToSelect.entrySet()) {
			String MSH = entry.getKey();
			int[] timeValues = entry.getValue();
			int months = timeValues[0];
			int years = timeValues[1];

			// Open the dropdown
			MSHDropdownTrigger.click();
			Thread.sleep(1000); // Pause for dropdown to open

			try {
				// Wait for the Medical Surgical History option to be clickable and select it
				WebElement mshOption = wait.until(
						ExpectedConditions.elementToBeClickable(By.xpath("//span[normalize-space()='" + MSH + "']")));
				mshOption.click();
				System.out.println(" Selected Medical Surgical History Option: 0" + a + " " + MSH);

				// Time of onset Month(s)
				driver.findElement(By.xpath("//input[@placeholder='Time of onset Month(s)']"))
						.sendKeys(String.valueOf(months));

				// Time of onset Year(s)
				driver.findElement(By.xpath("//input[@placeholder='Time of onset Year(s)']"))
						.sendKeys(String.valueOf(years));

				// Details
				driver.findElement(By.xpath("//input[@placeholder='Enter Details']")).sendKeys("Details for " + MSH);

				// Click on SAVE Button
				driver.findElement(By.xpath("//button[normalize-space()='Save']")).click();
				Thread.sleep(1000); // Pause for save action

				// Handle Toast Message
				WebElement snackBarButton = driver
						.findElement(By.xpath("//div[@aria-live='assertive']//div//simple-snack-bar//div//button"));
				if (snackBarButton.isDisplayed()) {
					snackBarButton.click();
				}
			} catch (Exception e) {
				System.out.println(
						"Failed to Select Medical Surgical History option: " + MSH + ". Error: " + e.getMessage());
			}

			// Pauses for 1 second
			Thread.sleep(1000);
			a++;
		}

		// Scroll to the bottom of the page
		js.executeScript("window.scrollTo(0, document.body.scrollHeight);");

		// Pause for 2 seconds
		Thread.sleep(2000);

		// Flow
		System.out.println("Step# 20: Successfully Saved The 'MEDICAL SURGICAL HISTORY' Form");

		// ______________________1.3 ALLERGIES______________________

		// Scroll to the top of the page
		js.executeScript("window.scrollTo(0, 0);");

		// Wait for the navigation bar to be visible
		WebElement historyDropdown3 = wait
				.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[normalize-space()='HISTORY']")));

		// Click on the "History" dropdown
		historyDropdown3.click();
		System.out.println("");
		System.out.println(
				"Step# 21: Clicked on the 'HISTORY' Section in the Navigation Bar and Select '1.3 - ALLERGIES' Form.");

		// Pauses for 2 seconds
		Thread.sleep(2000);

		// Wait for the "1.3 - ALLERGIES" option to be visible
		WebElement ALLERGIES = wait
				.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[normalize-space()='1.3 - Allergies']")));

		// Click on the "1.3 - ALLERGIES" option
		ALLERGIES.click();

		// Pauses for 1 seconds
		Thread.sleep(1000);

		// Map of ALLERGIES options with corresponding Anaphylaxis, Urticaria, and Skin
		// Rash

		Map<String, String[]> ALLERGIESToSelect = Map.of("ACE Inhibitor", new String[] { "Yes", "No", "YES" },
				"Insulin", new String[] { "No", "Yes", "Yes" }, "NSAID", new String[] { "Yes", "No", "No" });

		// Locate the "ALLERGIES" Dropdown
		WebElement ALLERGIESDropdownTrigger = driver.findElement(By.xpath("//input[@placeholder='Select Allergy']"));

		// for Sequence of ALLERGIES Options
		int b = 1;

		for (Map.Entry<String, String[]> entry : ALLERGIESToSelect.entrySet()) {
			String Allergies = entry.getKey();
			String[] parameters = entry.getValue();
			String Anaphylaxis = parameters[0];
			String Urticaria = parameters[1];
			String SkinRash = parameters[2];

			// Open the dropdown
			ALLERGIESDropdownTrigger.click();
			Thread.sleep(1000); // Pause for dropdown to open

			try {
				// Wait for the ALLERGIES option to be clickable and select it
				WebElement allergiesOption = wait.until(ExpectedConditions
						.elementToBeClickable(By.xpath("//span[normalize-space()='" + Allergies + "']")));
				allergiesOption.click();
				System.out.println(" Selected ALLERGIES Option: 0" + b + " " + Allergies);

				// Anaphylaxis
				driver.findElement(By.xpath("//div[2]//select[1]")).sendKeys(Anaphylaxis);

				// Urticaria
				driver.findElement(By.xpath("//div[3]//select[1]")).sendKeys(Urticaria);

				// Skin Rash
				driver.findElement(By.xpath("//div[4]//select[1]")).sendKeys(SkinRash);

				// Details
				driver.findElement(By.xpath("//input[@placeholder='Details']")).sendKeys(" Details for " + Allergies);

				// Click on SAVE Button
				driver.findElement(By.xpath("//button[normalize-space()='Save']")).click();
				Thread.sleep(1000); // Pause for save action

				// Handle Toast Message
				WebElement snackBarButton = driver
						.findElement(By.xpath("//div[@aria-live='assertive']//div//simple-snack-bar//div//button"));
				if (snackBarButton.isDisplayed()) {
					snackBarButton.click();
				}
			} catch (Exception e) {
				System.out.println("Failed to Select ALLERGIES option: " + Allergies + ". Error: " + e.getMessage());
			}

			// Pauses for 1 second
			Thread.sleep(1000);
			b++;
		}

		// Scroll to the bottom of the page
		js.executeScript("window.scrollTo(0, document.body.scrollHeight);");

		// Pause for 2 seconds
		Thread.sleep(2000);

		// Flow
		System.out.println("Step# 22: Successfully Saved The 'ALLERGIES' Form");

		// ______________________1.4 FAMILY HISTORY______________________

		// Wait for the navigation bar to be visible
		WebElement historyDropdown4 = wait
				.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[normalize-space()='HISTORY']")));

		// Click on the "History" dropdown
		historyDropdown4.click();
		System.out.println("");
		System.out.println(
				"Step# 23: Clicked on the 'HISTORY' Section in the Navigation Bar and Select '1.4 - Family History' Form.");

		// Pauses for 2 seconds
		Thread.sleep(2000);

		// Wait for the "1.4 - Family History" option to be visible
		WebElement familyHistoryOption = wait.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//a[normalize-space()='1.4 - Family History']")));

		// Click on the "1.4 - Family History" option
		familyHistoryOption.click();

		// Pauses for 1 second
		Thread.sleep(1000);

		// List of diseases to search for
		List<String> diseasesToFind = List.of("Hypertension", "MI", "Asthma", "Cancer", "Mental Health");

		try {
			// Locate the table
			WebElement table = driver.findElement(By.xpath("//div[@class='card-body']//table"));

			// Get all rows in the table body
			List<WebElement> rows = table.findElements(By.tagName("tr"));

			Random random = new Random(); // Random object for random checkbox selection

			for (String diseaseToFind : diseasesToFind) {
				boolean diseaseFound = false;

				// Iterate through rows to find the disease
				for (WebElement row : rows) {
					List<WebElement> cells = row.findElements(By.tagName("td"));
					if (cells.size() > 1) { // Ensure it's a valid row with data
						String diseaseCell = cells.get(1).getText().trim();
						if (diseaseCell.equalsIgnoreCase(diseaseToFind)) {
							System.out.println(" Found Disease: [ " + diseaseCell + " ]");
							diseaseFound = true;

							// Randomly check the Siblings checkbox (3rd column, index 2)
							WebElement siblingsCheckbox = cells.get(2)
									.findElement(By.xpath(".//*[@class='form-check-input']"));
							if (random.nextBoolean() && !siblingsCheckbox.isSelected()) {
								siblingsCheckbox.click();
								System.out.println(" Randomly Checked Siblings Checkbox for [ " + diseaseCell + " ]");
							}

							// Randomly check the Grandparents checkbox (5th column, index 4)
							WebElement grandparentsCheckbox = cells.get(4)
									.findElement(By.xpath(".//*[@class='form-check-input']"));
							if (random.nextBoolean() && !grandparentsCheckbox.isSelected()) {
								grandparentsCheckbox.click();
								System.out
										.println(" Randomly Checked Grandparents Checkbox for [ " + diseaseCell + " ]");
							}

							break; // Exit loop after finding and processing the disease
						}
					}
				}
				if (!diseaseFound) {
					System.out.println("Disease '" + diseaseToFind + "' not found in the Family History table");
				}
			}

			// Create an instance of Actions class
			Actions actions = new Actions(driver);

			// Perform multiple ARROW_DOWN key presses to scroll to the bottom
			for (int x = 0; x < 50; x++) { // Increased iterations due to smaller scroll increment
				actions.sendKeys(Keys.ARROW_DOWN).perform();
				try {
					Thread.sleep(100); // Brief pause to allow page to render (reduced due to more iterations)

				} catch (InterruptedException e) {
					System.out.println("Interrupted during scroll: " + e.getMessage());
				}
			}

			// Click the Save button
			WebElement saveButton = driver.findElement(By.id("btnSubmit"));
			wait.until(ExpectedConditions.elementToBeClickable(saveButton)).click();
			System.out.println("Step# 24: Successfully Saved The 'Family History' Form");

			// Handle Toast Message (if displayed)
			try {
				WebElement snackBarButton = wait.until(ExpectedConditions.visibilityOfElementLocated(
						By.xpath("//div[@aria-live='assertive']//div//simple-snack-bar//div//button")));
				if (snackBarButton.isDisplayed()) {
					snackBarButton.click();
				}
			} catch (Exception e) {
				System.out.println("No toast message displayed or error handling toast: " + e.getMessage());
			}

		} catch (Exception e) {
			System.out.println("Error processing Family History form: " + e.getMessage());
		}

		// _________________1.5 Personal and Social History__________________

		// Scroll to the top of the page
		js.executeScript("window.scrollTo(0, 0);");

		// Wait for the navigation bar to be visible
		WebElement historyDropdown5 = wait
				.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[normalize-space()='HISTORY']")));

		// Click on the "History" dropdown
		historyDropdown5.click();
		System.out.println("");
		System.out.println(
				"Step# 25: Clicked on the 'HISTORY' Section in the Navigation Bar and Select '1.5 - Personal and Social History' Form.");

		// Pauses for 2 seconds
		Thread.sleep(2000);

		// Wait for the "1.5 - Personal and Social History" option to be visible
		WebElement PersonalAndSocialHistory = wait.until(ExpectedConditions
				.elementToBeClickable(By.xpath("//a[normalize-space()='1.5 - Personal Social History']")));

		// Click on the "1.5 - Personal and Social History" option
		PersonalAndSocialHistory.click();

		// Pauses for 1 seconds
		Thread.sleep(1000);

		// Scroll to the top of the page
		js.executeScript("window.scrollTo(0, 0);");

		// Map of Personal and Social History options with corresponding About
		// Occupation/Schooling, About Home Situation, Physical Activity, Sources Of
		// Stress, Die, Alternative Healthcare Practices.

		Map<String, String[]> PSHToSelect = Map.of("Unemployed/able to Work",
				new String[] { "Working for 3 Years", "Joint Family System", "Walking and Jogging in Morning",
						"Extra Working and Family Support", "Rice and Fast Food", "Not any Healthcare Resource" });

		// Locate the "Occupation/Schooling" Dropdown
		WebElement OSDropdownTrigger = driver
				.findElement(By.xpath("/html/body/app-root/app-ps-history/div/div/div/div[1]/div[1]/div/div"));

		// for Sequence of Personal and Social History Options

		for (Map.Entry<String, String[]> entry : PSHToSelect.entrySet()) {
			String PSH = entry.getKey();
			String[] parameters = entry.getValue();
			String About_Occupation_Schooling = parameters[0];
			String About_Home_Situation = parameters[1];
			String Physical_Activity = parameters[2];
			String Sources_Of_Stress = parameters[3];
			String Diet = parameters[4];
			String Alternative_Healthcare_Practices = parameters[5];

			// Open the dropdown
			OSDropdownTrigger.click();
			Thread.sleep(1000); // Pause for dropdown to open

			try {
				// Wait for the Occupation/Schooling option to be clickable and select it
				WebElement OSOption = wait.until(
						ExpectedConditions.elementToBeClickable(By.xpath("//span[normalize-space()='" + PSH + "']")));
				OSOption.click();
				System.out.println(" Selected Occupation/Schooling Option: [ " + PSH + " ]");

				Thread.sleep(500); // Pause for save action

				// About Occupation/Schooling
				driver.findElement(
						By.xpath("/html/body/app-root/app-ps-history/div/div/div/div[1]/div[2]/div/textarea"))
						.sendKeys(About_Occupation_Schooling);

				Thread.sleep(500); // Pause for save action

				// About Home Situation
				driver.findElement(By.xpath("//div[@class='card-body']//div[1]//div[3]//div[1]//textarea[1]"))
						.sendKeys(About_Home_Situation);

				Thread.sleep(500); // Pause for save action

				// Physical Activity
				driver.findElement(By.xpath("//div[@class='card-body']//div[1]//div[4]//div[1]//textarea[1]"))
						.sendKeys(Physical_Activity);

				Thread.sleep(500); // Pause for save action

				// Sources Of Stress
				driver.findElement(By.xpath("//div[@class='card-body']//div[1]//div[5]//div[1]//textarea[1]"))
						.sendKeys(Sources_Of_Stress);

				Thread.sleep(500); // Pause for save action

				// Diet
				driver.findElement(By.xpath("//div[@class='row']//div[1]//div[1]//textarea[1]")).sendKeys(Diet);

				Thread.sleep(500); // Pause for save action

				// Alternative Healthcare Practices
				driver.findElement(By.xpath("//body//app-root//div[2]//div[2]//div[1]//textarea[1]"))
						.sendKeys(Alternative_Healthcare_Practices);

				Thread.sleep(500); // Pause for save action

				// PHQ2
				driver.findElement(By.xpath("//input[@placeholder='Enter only 0-6 digits']")).sendKeys("4");
				System.out.println(" Selected PHQ-2 Score: [ 4 ]");

				Thread.sleep(500); // Pause for save action

			} catch (Exception e) {
				System.out
						.println("Failed to Select Occupation/Schooling option: " + PSH + ". Error: " + e.getMessage());
			}
		}

		// Pauses for 2 second
		Thread.sleep(2000);

		// Step 1: Select "Yes" for Substance Use
		WebElement substanceUseYes = wait.until(ExpectedConditions.elementToBeClickable(By.id("elementyes")));
		substanceUseYes.click();
		System.out.println(" Clicked on 'YES' for Substance Use");

		Thread.sleep(500); // Pause for the dialog to open

		// Step 2: Wait for additional options to appear
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("newhide")));

		Thread.sleep(5000); // Pause for the dialog to open

		// Scroll to the bottom of the page
		Actions actions = new Actions(driver);
		actions.sendKeys(Keys.PAGE_DOWN).perform();

		// Step 3: Select "Yes" for Cigarettes
		WebElement cigarettesYes = wait.until(ExpectedConditions.elementToBeClickable(By.id("gridRadios1")));
		cigarettesYes.click();
		System.out.println(" Clicked on 'YES' for Option #01 [ Cigarettes ]");

		Thread.sleep(1000); // Pause for the dialog to open

		// Step 4: Wait for the dialog box to appear
		WebElement dialogContainer = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("mat-dialog-0")));

		// Step 5: Enter data into the dialog box fields
		// Duration (Years)
		WebElement durationField = dialogContainer.findElement(
				By.xpath(".//input[@placeholder='0' and preceding-sibling::label[text()='Duration (Years)']]"));
		durationField.sendKeys("5");

		// Amount
		WebElement amountField = dialogContainer
				.findElement(By.xpath(".//input[@placeholder='0' and preceding-sibling::label[text()='Amount']]"));
		amountField.sendKeys("10");

		// No of packs per day
		WebElement packsField = dialogContainer.findElement(
				By.xpath(".//input[@placeholder='0' and preceding-sibling::label[text()='No of packs per day']]"));
		packsField.sendKeys("2");

		Thread.sleep(1000); // Pause for the dialog to open

		// Step 6: Click the Save button
		WebElement saveButton = dialogContainer.findElement(By.xpath(".//button[text()='Save']"));
		saveButton.click();

		// Step 7: Wait for the dialog to close
		wait.until(ExpectedConditions.invisibilityOfElementLocated(By.id("mat-dialog-0")));

		// Step 8: Select "Yes" for Alcohol
		WebElement alcoholYes = wait.until(ExpectedConditions.elementToBeClickable(By.id("radioalcohol")));
		alcoholYes.click();
		System.out.println(" Clicked on 'YES' for Option #02 [ Alcohol ]");

		Thread.sleep(1000); // Pause for the dialog to open

		// Step 9: Wait for the Alcohol dialog box to appear
		WebElement alcoholDialogContainer = wait
				.until(ExpectedConditions.visibilityOfElementLocated(By.id("mat-dialog-1")));

		// Step 10: Enter data into the Alcohol dialog box fields
		// Duration (Years)
		WebElement alcoholDurationField = alcoholDialogContainer.findElement(
				By.xpath(".//input[@placeholder='0' and preceding-sibling::label[text()='Duration (Years)']]"));
		alcoholDurationField.sendKeys("3");

		// Amount
		WebElement alcoholAmountField = alcoholDialogContainer
				.findElement(By.xpath(".//input[@placeholder='0' and preceding-sibling::label[text()='Amount']]"));
		alcoholAmountField.sendKeys("8");

		// Others
		WebElement alcoholOthersField = alcoholDialogContainer
				.findElement(By.xpath(".//input[@placeholder='0' and preceding-sibling::label[text()='Others']]"));
		alcoholOthersField.sendKeys("Wine and beer");

		Thread.sleep(1000); // Pause for the dialog to open

		// Step 11: Click the Save button in the Alcohol dialog
		WebElement alcoholSaveButton = alcoholDialogContainer.findElement(By.xpath(".//button[text()='Save']"));
		alcoholSaveButton.click();

		// Step 12: Wait for the Alcohol dialog to close
		wait.until(ExpectedConditions.invisibilityOfElementLocated(By.id("mat-dialog-1")));

		// Step 13: Select "Yes" for Naswar
		WebElement naswarYes = wait.until(ExpectedConditions.elementToBeClickable(By.id("gridRadiosnaswar")));
		naswarYes.click();
		System.out.println(" Clicked on 'YES' for Option #03 [ Naswar ]");

		Thread.sleep(1000); // Pause for the dialog to open

		// Step 14: Wait for the Naswar dialog box to appear
		WebElement naswarDialogContainer = wait
				.until(ExpectedConditions.visibilityOfElementLocated(By.id("mat-dialog-2")));

		// Step 15: Enter data into the Naswar dialog box fields
		// Duration (Years)
		WebElement naswarDurationField = naswarDialogContainer.findElement(
				By.xpath(".//input[@placeholder='0' and preceding-sibling::label[text()='Duration (Years)']]"));
		naswarDurationField.sendKeys("4");

		// Amount
		WebElement naswarAmountField = naswarDialogContainer
				.findElement(By.xpath(".//input[@placeholder='0' and preceding-sibling::label[text()='Amount']]"));
		naswarAmountField.sendKeys("15");

		// Others
		WebElement naswarOthersField = naswarDialogContainer
				.findElement(By.xpath(".//input[@placeholder='0' and preceding-sibling::label[text()='Others']]"));
		naswarOthersField.sendKeys("Traditional naswar blend");

		Thread.sleep(1000); // Pause for the dialog to open

		// Step 16: Click the Save button in the Naswar dialog
		WebElement naswarSaveButton = naswarDialogContainer.findElement(By.xpath(".//button[text()='Save']"));
		naswarSaveButton.click();

		// Step 17: Wait for the Naswar dialog to close
		wait.until(ExpectedConditions.invisibilityOfElementLocated(By.id("mat-dialog-2")));

		// Step 18: Select "Yes" for Others
		WebElement othersYes = wait.until(ExpectedConditions.elementToBeClickable(By.id("isShown")));
		othersYes.click();
		System.out.println(" Clicked on 'YES' for Option #04 [ Others ]");

		Thread.sleep(1000); // Pause for the dialog to open

		// Step 19: Wait for the textarea to be visible and fill it
		WebElement othersTextarea = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("others")));
		js.executeScript("arguments[0].removeAttribute('hidden');", othersTextarea);
		othersTextarea.sendKeys("Additional substance details here");

		// Optional: Print confirmation
		System.out.println(" Form and Dialogs Filled Successfully!");

		// Click on SAVE Button
		driver.findElement(By.xpath("//button[normalize-space()='Save']")).click();
		Thread.sleep(1000); // Pause for save action

		// Handle Toast Message
		WebElement snackBarButton = driver
				.findElement(By.xpath("//div[@aria-live='assertive']//div//simple-snack-bar//div//button"));
		if (snackBarButton.isDisplayed()) {
			snackBarButton.click();
		}

		// Flow
		System.out.println("Step# 26: Successfully Saved The 'Personal and Social History' Form");

		// _________________1.6 Review Of Systems__________________

		// Scroll to the top of the page
		js.executeScript("window.scrollTo(0, 0);");

		// Wait for the navigation bar to be visible
		WebElement historyDropdown6 = wait
				.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[normalize-space()='HISTORY']")));

		// Click on the "History" dropdown
		historyDropdown6.click();
		System.out.println("");
		System.out.println(
				"Step# 27: Clicked on the 'HISTORY' Section in the Navigation Bar and Select '1.6 - Review Of Systems' Form.");

		// Pauses for 2 seconds
		Thread.sleep(2000);

		// Wait for the "1.6 - Review Of Systems" option to be visible
		WebElement Review_Of_Systems = wait.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//a[normalize-space()='1.6 - Review Of Systems']")));

		// Click on the "1.6 - Review Of Systems" option
		Review_Of_Systems.click();

		// Pauses for 1 seconds
		Thread.sleep(1000);

		try {
			// Define sections to process
			String[] sections = { "1", // Overall Health
					"2", // Skin
					"3", // HEENT
					"4", // Neck
					"5", // Breast
					"6", // Respiratory
					"7", // Cardiovascular
					"8", // Peripheral Vascular
					"9", // Gastrointestinal
					"10", // Urinary
					"11", // Genital
					"12", // Neurological
					"13", // Musculoskeletal
					"14", // Endocrine
					"15", // Mood
					"16" // Other
			};

			// Define which sections are Abnormal and their details
			Map<String, String> abnormalSections = new HashMap<>();
			abnormalSections.put("2", "Skin: Observed rash and irritation."); // Skin - Abnormal
			System.out.println(" Checked Abnormal For : " + abnormalSections.get("2"));

			abnormalSections.put("4", "Neck: Swelling detected."); // HEENT - Abnormal
			System.out.println(" Checked Abnormal For : " + abnormalSections.get("4"));

			abnormalSections.put("7", "Cardiovascular: Irregular heartbeat detected."); // Cardiovascular - Abnormal
			System.out.println(" Checked Abnormal For : " + abnormalSections.get("7"));

			abnormalSections.put("9", "Gastrointestinal: Abdominal pain and bloating."); // Gastrointestinal - Abnormal
			System.out.println(" Checked Abnormal For : " + abnormalSections.get("9"));

			abnormalSections.put("11", "Genital: Abnormal discharge noted."); // Genital - Abnormal
			System.out.println(" Checked Abnormal For : " + abnormalSections.get("11"));

			abnormalSections.put("14", "Endocrine: Thyroid dysfunction suspected."); // Endocrine - Abnormal
			System.out.println(" Checked Abnormal For : " + abnormalSections.get("14"));

			abnormalSections.put("16", "Other: Unspecified abnormal symptoms."); // Other - Abnormal
			System.out.println(" Checked Abnormal For : " + abnormalSections.get("16"));

			// Add more sections as needed, e.g., abnormalSections.put("7", "Cardiovascular:
			// Irregular heartbeat.");

			// Process each section
			for (String section : sections) {
				// Locate Normal and Abnormal checkboxes
				WebElement normalCheckbox = wait
						.until(ExpectedConditions.elementToBeClickable(By.id(section + "_normal")));
				WebElement abnormalCheckbox = wait
						.until(ExpectedConditions.elementToBeClickable(By.id(section + "_abnormal")));
				WebElement detailTextarea = driver.findElement(By.id(section + "_detail"));

				// Check if section is marked as Abnormal
				if (abnormalSections.containsKey(section)) {
					js.executeScript("arguments[0].scrollIntoView({block: 'center'});", abnormalCheckbox);
					// Check Abnormal checkbox
					abnormalCheckbox.click();
					// Wait for textarea to become visible
					wait.until(ExpectedConditions.visibilityOf(detailTextarea));
					// Enter details in the textarea
					detailTextarea.sendKeys(abnormalSections.get(section));
				} else {
					js.executeScript("arguments[0].scrollIntoView({block: 'center'});", normalCheckbox);
					// Check Normal checkbox
					normalCheckbox.click();
				}
			}

			// Enter details for "Details of Review of System" (section 17)
			WebElement reviewDetails = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("17_detail")));
			reviewDetails.sendKeys(
					"Comprehensive review of systems completed. All sections marked abnormal with specific findings noted.");

			Thread.sleep(1000); // Pause for the dialog to open

			// Click the Save button
			WebElement SaveButton = wait
					.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[normalize-space()='Save']")));
			SaveButton.click();

			System.out.println("Step# 28: Successfully Saved The 'Review of System' Form");

		} catch (Exception e) {
			e.printStackTrace();
		}

		// _________________1.7 Obstretic History__________________

		// Scroll to the top of the page
		js.executeScript("window.scrollTo(0, 0);");

		// Wait for the navigation bar to be visible
		WebElement historyDropdown7 = wait
				.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[normalize-space()='HISTORY']")));

		// Click on the "History" dropdown
		historyDropdown7.click();
		System.out.println("");
		System.out.println(
				"Step# 29: Clicked on the 'HISTORY' Section in the Navigation Bar and Select '1.7 - Obstretic History' Form.");

		// Pauses for 2 seconds
		Thread.sleep(2000);

		// Wait for the "1.7 - Obstretic History" option to be visible
		WebElement Obstretic_History = wait.until(
				ExpectedConditions.elementToBeClickable(By.xpath("//a[normalize-space()='1.7 - Obstretic History']")));

		// Click on the "1.7 - Obstretic History" option
		Obstretic_History.click();

		// Pauses for 1 seconds
		Thread.sleep(1000);

		// Fill LMP Date
		WebElement lmpDate = wait.until(
				ExpectedConditions.visibilityOfElementLocated(By.cssSelector("input[formcontrolname='lmpdate']")));
		lmpDate.sendKeys("17-05-2025"); // Sample date
		System.out.println(" LMP Date: " + lmpDate.getDomProperty("value"));

		Thread.sleep(500); // Pause for the dialog to open

		// Fill EDD Date
		WebElement eddDate = wait.until(
				ExpectedConditions.visibilityOfElementLocated(By.cssSelector("input[formcontrolname='edddate']")));
		eddDate.sendKeys("15-03-2026"); // Sample date (approximately 9 months from LMP)
		System.out.println(" EDD Date: " + eddDate.getDomProperty("value"));

		Thread.sleep(500); // Pause for the dialog to open

		// Fill Gravida
		WebElement gravida = wait.until(
				ExpectedConditions.visibilityOfElementLocated(By.cssSelector("input[formcontrolname='gravida']")));
		gravida.sendKeys("3"); // Sample value
		System.out.println(" Gravida: " + gravida.getDomProperty("value"));

		Thread.sleep(500); // Pause for the dialog to open

		// Fill Para (Full-term)
		WebElement para = wait
				.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("input[formcontrolname='para']")));
		para.sendKeys("2"); // Sample value
		System.out.println(" Para (Full-term): " + para.getDomProperty("value"));

		Thread.sleep(500); // Pause for the dialog to open

		// Fill Premature Births
		WebElement prematureBirths = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.cssSelector("input[formcontrolname='prematurebirths']")));
		prematureBirths.sendKeys("1"); // Sample value
		System.out.println(" Premature Births: " + prematureBirths.getDomProperty("value"));

		Thread.sleep(500); // Pause for the dialog to open

		// Fill Abortions
		WebElement abortions = wait.until(
				ExpectedConditions.visibilityOfElementLocated(By.cssSelector("input[formcontrolname='abortions']")));
		abortions.sendKeys("0"); // Sample value
		System.out.println(" Abortions: " + abortions.getDomProperty("value"));

		Thread.sleep(500); // Pause for the dialog to open

		// Fill Live Birth
		WebElement liveBirth = wait
				.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("input[formcontrolname='live']")));
		liveBirth.sendKeys("2"); // Sample value
		System.out.println(" Live Birth: " + liveBirth.getDomProperty("value"));

		Thread.sleep(500); // Pause for the dialog to open

		// Pregnancy History: Complications During Pregnancy
		WebElement pregnancyYes = wait.until(ExpectedConditions.elementToBeClickable(By.id("pregnancyyes")));
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", pregnancyYes);
		pregnancyYes.click();
		System.out.println(" Clicked on 'YES' for Complications During Pregnancy");

		WebElement pregnancyDetails = wait.until(ExpectedConditions.visibilityOfElementLocated(
				By.cssSelector("textarea[formcontrolname='pregnancycomplicationsdetails']")));
		pregnancyDetails.sendKeys("Gestational diabetes and hypertension noted in previous pregnancy.");

		Thread.sleep(1000); // Pause for the dialog to open

		// Complications During Delivery
		WebElement deliveryYes = wait.until(ExpectedConditions.elementToBeClickable(By.id("complicationsyes")));
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", deliveryYes);
		deliveryYes.click();
		System.out.println(" Clicked on 'YES' for Complications During Delivery");

		Thread.sleep(500); // Pause for the dialog to open

		WebElement deliveryDetails = wait.until(ExpectedConditions.visibilityOfElementLocated(
				By.cssSelector("textarea[formcontrolname='deliverycomplicationsdetails']")));
		deliveryDetails.sendKeys("Prolonged labor requiring assisted delivery.");

		Thread.sleep(500); // Pause for the dialog to open

		// Complications After Delivery
		WebElement afterDeliveryYes = wait.until(ExpectedConditions.elementToBeClickable(By.id("deliveryyes")));
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", afterDeliveryYes);
		afterDeliveryYes.click();
		System.out.println(" Clicked on 'YES' for Complications After Delivery");

		Thread.sleep(500); // Pause for the dialog to open

		WebElement afterDeliveryDetails = wait.until(ExpectedConditions.visibilityOfElementLocated(
				By.cssSelector("textarea[formcontrolname='afterdeliverycomplicationsdetails']")));
		afterDeliveryDetails.sendKeys("Postpartum hemorrhage managed with medication.");

		Thread.sleep(1000); // Pause for the dialog to open

		// Risk Factors
		String[] riskFactors = { "parity", "sga", "lga", "fetalanomalies", "gestationaldiabetes", "pretermlabour",
				"depression" };
		// Define details for each risk factor's textarea
		Map<String, String> riskFactorDetails = new HashMap<>();
		riskFactorDetails.put("parity", "Parity > 5: Increased risk due to multiple pregnancies.");

		riskFactorDetails.put("sga", "SGA/IUGR: Small for gestational age noted in previous pregnancy.");

		riskFactorDetails.put("lga", "LGA/Macrosomia: Large for gestational age observed.");

		riskFactorDetails.put("fetalanomalies", "Fetal Anomalies: Congenital anomalies detected.");

		riskFactorDetails.put("gestationaldiabetes", "Gestational Diabetes: Managed with insulin.");

		riskFactorDetails.put("pretermlabour", "Preterm Labour: History of early delivery.");

		riskFactorDetails.put("depression", "Depression: Postpartum depression reported.");

		for (String risk : riskFactors) {
			// Check the risk factor checkbox
			WebElement riskCheckbox = wait.until(
					ExpectedConditions.elementToBeClickable(By.cssSelector("input[formcontrolname='" + risk + "']")));
			js.executeScript("arguments[0].scrollIntoView({block: 'center'});", riskCheckbox);
			riskCheckbox.click();
			System.out.println(" Clicked on 'YES' for Risk Factor: " + risk);
			Thread.sleep(500); // Pause for the dialog to open

			// Try to locate and fill the associated textarea (if it exists)
			try {
				WebElement riskDetails = wait.until(ExpectedConditions
						.visibilityOfElementLocated(By.cssSelector("textarea[formcontrolname='" + risk + "details']")));
				riskDetails.sendKeys(riskFactorDetails.get(risk));
			} catch (Exception e) {
				System.out.println(" Textarea for risk factor '" + risk + "' not found or not visible.");
			}
		}

		Thread.sleep(1000); // Pause for the dialog to open

		// Post Natal History: Type of Delivery
		WebElement deliveryCSection = wait.until(ExpectedConditions.elementToBeClickable(By.id("gridRadios2")));
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", deliveryCSection);
		deliveryCSection.click();
		System.out.println(" Clicked on 'C-Section' for Type of Delivery");

		Thread.sleep(500); // Pause for the dialog to open

		WebElement deliveryDetailsTextarea = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.cssSelector("textarea[formcontrolname='typeofdeliverydetails']")));
		deliveryDetailsTextarea.sendKeys("C-section due to fetal distress.");

		Thread.sleep(500); // Pause for the dialog to open

		// Pain
		WebElement painNo = wait.until(ExpectedConditions.elementToBeClickable(By.id("painno")));
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", painNo);
		painNo.click();
		System.out.println(" Clicked on 'No' for Pain");

		Thread.sleep(500); // Pause for the dialog to open

		WebElement painDetails = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.cssSelector("textarea[formcontrolname='paindetails']")));
		painDetails.sendKeys("Moderate abdominal pain post-delivery.");

		Thread.sleep(500); // Pause for the dialog to open

		// Breast Feeding
		WebElement feedingYes = wait.until(ExpectedConditions.elementToBeClickable(By.id("feedingyes")));
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", feedingYes);
		feedingYes.click();
		System.out.println(" Clicked on 'YES' for Breast Feeding");

		Thread.sleep(500); // Pause for the dialog to open

		WebElement feedingDetails = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.cssSelector("textarea[formcontrolname='breastfeedingdetails']")));
		feedingDetails.sendKeys("Breastfeeding initiated successfully.");

		Thread.sleep(500); // Pause for the dialog to open

		// Vaginal Discharge
		WebElement vaginalYes = wait.until(ExpectedConditions.elementToBeClickable(By.id("vaginalyes")));
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", vaginalYes);
		vaginalYes.click();
		System.out.println(" Clicked on 'YES' for Vaginal Discharge");

		Thread.sleep(1000); // Pause for the dialog to open

		WebElement vaginalDetails = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.cssSelector("textarea[formcontrolname='vaginaldischargedetails']")));
		vaginalDetails.sendKeys("Mild lochia persisting.");

		Thread.sleep(500); // Pause for the dialog to open

		// Urinary Incontinence
		WebElement incontinenceNo = wait.until(ExpectedConditions.elementToBeClickable(By.id("incontinenceno")));
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", incontinenceNo);
		incontinenceNo.click();
		System.out.println(" Clicked on 'No' for Urinary Incontinence");

		Thread.sleep(500); // Pause for the dialog to open

		WebElement incontinenceDetails = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.cssSelector("textarea[formcontrolname='urinaryincontinencedetails']")));
		incontinenceDetails.sendKeys("Stress incontinence reported.");

		Thread.sleep(500); // Pause for the dialog to open

		// PHQ-9 Score
		WebElement phqScore = wait.until(
				ExpectedConditions.visibilityOfElementLocated(By.cssSelector("input[formcontrolname='phQ2_score']")));
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", phqScore);
		phqScore.sendKeys("12"); // Sample score (0-27)
		System.out.println(" PHQ-9 Score: " + phqScore.getDomProperty("value"));

		Thread.sleep(500); // Pause for the dialog to open

		// Birth Spacing
		WebElement spacingYes = wait.until(ExpectedConditions.elementToBeClickable(By.id("spacingyes")));
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", spacingYes);
		spacingYes.click();
		System.out.println(" Clicked on 'YES' for Birth Spacing");

		Thread.sleep(500); // Pause for the dialog to open

		WebElement spacingDetails = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.cssSelector("textarea[formcontrolname='birthspacingdetails']")));
		spacingDetails.sendKeys("Planning for 2-year birth spacing.");

		Thread.sleep(500); // Pause for the dialog to open

		// Click Save button
		WebElement SaveButton = wait
				.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[normalize-space()='Save']")));
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", SaveButton);
		SaveButton.click();

		System.out.println("Step# 30: Successfully Saved The 'Obstretic History' Form");

	}
}
